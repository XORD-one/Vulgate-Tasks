// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ParentEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_name", Value.fromString(""));
    this.set("_parentAddress", Value.fromBytes(Bytes.empty()));
    this.set("_childNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ParentEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ParentEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ParentEntity", id.toString(), this);
    }
  }

  static load(id: string): ParentEntity | null {
    return changetype<ParentEntity | null>(store.get("ParentEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _name(): string {
    let value = this.get("_name");
    return value!.toString();
  }

  set _name(value: string) {
    this.set("_name", Value.fromString(value));
  }

  get _parentAddress(): Bytes {
    let value = this.get("_parentAddress");
    return value!.toBytes();
  }

  set _parentAddress(value: Bytes) {
    this.set("_parentAddress", Value.fromBytes(value));
  }

  get _childNumber(): BigInt {
    let value = this.get("_childNumber");
    return value!.toBigInt();
  }

  set _childNumber(value: BigInt) {
    this.set("_childNumber", Value.fromBigInt(value));
  }
}

export class ChildEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("_parentAddress", Value.fromBytes(Bytes.empty()));
    this.set("_childAddress", Value.fromBytes(Bytes.empty()));
    this.set("_name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChildEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ChildEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ChildEntity", id.toString(), this);
    }
  }

  static load(id: string): ChildEntity | null {
    return changetype<ChildEntity | null>(store.get("ChildEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _parentAddress(): Bytes {
    let value = this.get("_parentAddress");
    return value!.toBytes();
  }

  set _parentAddress(value: Bytes) {
    this.set("_parentAddress", Value.fromBytes(value));
  }

  get _childAddress(): Bytes {
    let value = this.get("_childAddress");
    return value!.toBytes();
  }

  set _childAddress(value: Bytes) {
    this.set("_childAddress", Value.fromBytes(value));
  }

  get _name(): string {
    let value = this.get("_name");
    return value!.toString();
  }

  set _name(value: string) {
    this.set("_name", Value.fromString(value));
  }
}
